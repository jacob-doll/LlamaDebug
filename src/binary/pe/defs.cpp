#include "llama_debug/binary/pe/defs.h"

const std::string machine_string(uint16_t machine)
{
  static const std::map<uint16_t, std::string> machine_map = {
    { IMAGE_FILE_MACHINE_UNKNOWN, "IMAGE_FILE_MACHINE_UNKNOWN" },
    { IMAGE_FILE_MACHINE_TARGET_HOST, "IMAGE_FILE_MACHINE_TARGET_HOST" },
    { IMAGE_FILE_MACHINE_I386, "IMAGE_FILE_MACHINE_I386" },
    { IMAGE_FILE_MACHINE_R3000, "IMAGE_FILE_MACHINE_R3000" },
    { IMAGE_FILE_MACHINE_R4000, "IMAGE_FILE_MACHINE_R4000" },
    { IMAGE_FILE_MACHINE_R10000, "IMAGE_FILE_MACHINE_R10000" },
    { IMAGE_FILE_MACHINE_WCEMIPSV2, "IMAGE_FILE_MACHINE_WCEMIPSV2" },
    { IMAGE_FILE_MACHINE_ALPHA, "IMAGE_FILE_MACHINE_ALPHA" },
    { IMAGE_FILE_MACHINE_SH3, "IMAGE_FILE_MACHINE_SH3" },
    { IMAGE_FILE_MACHINE_SH3DSP, "IMAGE_FILE_MACHINE_SH3DSP" },
    { IMAGE_FILE_MACHINE_SH3E, "IMAGE_FILE_MACHINE_SH3E" },
    { IMAGE_FILE_MACHINE_SH4, "IMAGE_FILE_MACHINE_SH4" },
    { IMAGE_FILE_MACHINE_SH5, "IMAGE_FILE_MACHINE_SH5" },
    { IMAGE_FILE_MACHINE_ARM, "IMAGE_FILE_MACHINE_ARM" },
    { IMAGE_FILE_MACHINE_THUMB, "IMAGE_FILE_MACHINE_THUMB" },
    { IMAGE_FILE_MACHINE_ARMNT, "IMAGE_FILE_MACHINE_ARMNT" },
    { IMAGE_FILE_MACHINE_AM33, "IMAGE_FILE_MACHINE_AM33" },
    { IMAGE_FILE_MACHINE_POWERPC, "IMAGE_FILE_MACHINE_POWERPC" },
    { IMAGE_FILE_MACHINE_POWERPCFP, "IMAGE_FILE_MACHINE_POWERPCFP" },
    { IMAGE_FILE_MACHINE_IA64, "IMAGE_FILE_MACHINE_IA64" },
    { IMAGE_FILE_MACHINE_MIPS16, "IMAGE_FILE_MACHINE_MIPS16" },
    { IMAGE_FILE_MACHINE_ALPHA64, "IMAGE_FILE_MACHINE_ALPHA64" },
    { IMAGE_FILE_MACHINE_MIPSFPU, "IMAGE_FILE_MACHINE_MIPSFPU" },
    { IMAGE_FILE_MACHINE_MIPSFPU16, "IMAGE_FILE_MACHINE_MIPSFPU16" },
    { IMAGE_FILE_MACHINE_TRICORE, "IMAGE_FILE_MACHINE_TRICORE" },
    { IMAGE_FILE_MACHINE_CEF, "IMAGE_FILE_MACHINE_CEF" },
    { IMAGE_FILE_MACHINE_EBC, "IMAGE_FILE_MACHINE_EBC" },
    { IMAGE_FILE_MACHINE_AMD64, "IMAGE_FILE_MACHINE_AMD64" },
    { IMAGE_FILE_MACHINE_M32R, "IMAGE_FILE_MACHINE_M32R" },
    { IMAGE_FILE_MACHINE_ARM64, "IMAGE_FILE_MACHINE_ARM64" },
    { IMAGE_FILE_MACHINE_CEE, "IMAGE_FILE_MACHINE_CEE" }
  };

  auto it = machine_map.find(machine);
  return it == machine_map.end() ? "Unkown!" : it->second;
}

const std::string characteristic_string(uint16_t characteristic)
{
  static const std::map<uint16_t, std::string> characteristic_map = {
    { IMAGE_FILE_RELOCS_STRIPPED, "IMAGE_FILE_RELOCS_STRIPPED" },
    { IMAGE_FILE_EXECUTABLE_IMAGE, "IMAGE_FILE_EXECUTABLE_IMAGE" },
    { IMAGE_FILE_LINE_NUMS_STRIPPED, "IMAGE_FILE_LINE_NUMS_STRIPPED" },
    { IMAGE_FILE_LOCAL_SYMS_STRIPPED, "IMAGE_FILE_LOCAL_SYMS_STRIPPED" },
    { IMAGE_FILE_AGGRESIVE_WS_TRIM, "IMAGE_FILE_AGGRESIVE_WS_TRIM" },
    { IMAGE_FILE_LARGE_ADDRESS_AWARE, "IMAGE_FILE_LARGE_ADDRESS_AWARE" },
    { IMAGE_FILE_BYTES_REVERSED_LO, "IMAGE_FILE_BYTES_REVERSED_LO" },
    { IMAGE_FILE_32BIT_MACHINE, "IMAGE_FILE_32BIT_MACHINE" },
    { IMAGE_FILE_DEBUG_STRIPPED, "IMAGE_FILE_DEBUG_STRIPPED" },
    { IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP, "IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP" },
    { IMAGE_FILE_NET_RUN_FROM_SWAP, "IMAGE_FILE_NET_RUN_FROM_SWAP" },
    { IMAGE_FILE_SYSTEM, "IMAGE_FILE_SYSTEM" },
    { IMAGE_FILE_DLL, "IMAGE_FILE_DLL" },
    { IMAGE_FILE_UP_SYSTEM_ONLY, "IMAGE_FILE_UP_SYSTEM_ONLY" },
    { IMAGE_FILE_BYTES_REVERSED_HI, "IMAGE_FILE_BYTES_REVERSED_HI" }
  };

  auto it = characteristic_map.find(characteristic);
  return it == characteristic_map.end() ? "Unkown!" : it->second;
}